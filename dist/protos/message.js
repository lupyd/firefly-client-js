"use strict";
// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.5
//   protoc               v6.31.1
// source: message.proto
Object.defineProperty(exports, "__esModule", { value: true });
exports.UserMessages = exports.UserMessage = exports.ServerMessage = exports.ClientMessage = exports.Response = exports.Error = exports.Request = exports.GetUserMessages = exports.GroupMembers = exports.GroupChannelMessages = exports.GroupChannelMessage = exports.GroupMember = exports.RemoveUser = exports.AddUser = exports.GetGroupMessages = exports.GetGroupMembers = exports.GroupChat = exports.GroupChannel = exports.GroupChats = exports.AuthenticationToken = exports.VersionedMessage = exports.protobufPackage = void 0;
/* eslint-disable */
const wire_1 = require("@bufbuild/protobuf/wire");
exports.protobufPackage = "firefly";
function createBaseVersionedMessage() {
    return { version: 0, ts: 0n, data: new Uint8Array(0) };
}
exports.VersionedMessage = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.version !== 0) {
            writer.uint32(8).uint32(message.version);
        }
        if (message.ts !== 0n) {
            if (BigInt.asUintN(64, message.ts) !== message.ts) {
                throw new globalThis.Error("value provided for field message.ts of type uint64 too large");
            }
            writer.uint32(16).uint64(message.ts);
        }
        if (message.data.length !== 0) {
            writer.uint32(26).bytes(message.data);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseVersionedMessage();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.version = reader.uint32();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.ts = reader.uint64();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.data = reader.bytes();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            version: isSet(object.version) ? globalThis.Number(object.version) : 0,
            ts: isSet(object.ts) ? BigInt(object.ts) : 0n,
            data: isSet(object.data) ? bytesFromBase64(object.data) : new Uint8Array(0),
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.version !== 0) {
            obj.version = Math.round(message.version);
        }
        if (message.ts !== 0n) {
            obj.ts = message.ts.toString();
        }
        if (message.data.length !== 0) {
            obj.data = base64FromBytes(message.data);
        }
        return obj;
    },
    create(base) {
        return exports.VersionedMessage.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseVersionedMessage();
        message.version = object.version ?? 0;
        message.ts = object.ts ?? 0n;
        message.data = object.data ?? new Uint8Array(0);
        return message;
    },
};
function createBaseAuthenticationToken() {
    return { token: "" };
}
exports.AuthenticationToken = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.token !== "") {
            writer.uint32(10).string(message.token);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAuthenticationToken();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.token = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { token: isSet(object.token) ? globalThis.String(object.token) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.token !== "") {
            obj.token = message.token;
        }
        return obj;
    },
    create(base) {
        return exports.AuthenticationToken.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseAuthenticationToken();
        message.token = object.token ?? "";
        return message;
    },
};
function createBaseGroupChats() {
    return { chats: [] };
}
exports.GroupChats = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        for (const v of message.chats) {
            exports.GroupChat.encode(v, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGroupChats();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.chats.push(exports.GroupChat.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            chats: globalThis.Array.isArray(object?.chats) ? object.chats.map((e) => exports.GroupChat.fromJSON(e)) : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.chats?.length) {
            obj.chats = message.chats.map((e) => exports.GroupChat.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.GroupChats.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGroupChats();
        message.chats = object.chats?.map((e) => exports.GroupChat.fromPartial(e)) || [];
        return message;
    },
};
function createBaseGroupChannel() {
    return { groupId: 0, channelId: 0, channelType: 0, name: "" };
}
exports.GroupChannel = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.groupId !== 0) {
            writer.uint32(8).int32(message.groupId);
        }
        if (message.channelId !== 0) {
            writer.uint32(16).int32(message.channelId);
        }
        if (message.channelType !== 0) {
            writer.uint32(24).int32(message.channelType);
        }
        if (message.name !== "") {
            writer.uint32(34).string(message.name);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGroupChannel();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.groupId = reader.int32();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.channelId = reader.int32();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.channelType = reader.int32();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.name = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            groupId: isSet(object.groupId) ? globalThis.Number(object.groupId) : 0,
            channelId: isSet(object.channelId) ? globalThis.Number(object.channelId) : 0,
            channelType: isSet(object.channelType) ? globalThis.Number(object.channelType) : 0,
            name: isSet(object.name) ? globalThis.String(object.name) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.groupId !== 0) {
            obj.groupId = Math.round(message.groupId);
        }
        if (message.channelId !== 0) {
            obj.channelId = Math.round(message.channelId);
        }
        if (message.channelType !== 0) {
            obj.channelType = Math.round(message.channelType);
        }
        if (message.name !== "") {
            obj.name = message.name;
        }
        return obj;
    },
    create(base) {
        return exports.GroupChannel.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGroupChannel();
        message.groupId = object.groupId ?? 0;
        message.channelId = object.channelId ?? 0;
        message.channelType = object.channelType ?? 0;
        message.name = object.name ?? "";
        return message;
    },
};
function createBaseGroupChat() {
    return { name: "", groupId: 0, channels: [] };
}
exports.GroupChat = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.name !== "") {
            writer.uint32(10).string(message.name);
        }
        if (message.groupId !== 0) {
            writer.uint32(16).int32(message.groupId);
        }
        for (const v of message.channels) {
            exports.GroupChannel.encode(v, writer.uint32(26).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGroupChat();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.name = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.groupId = reader.int32();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.channels.push(exports.GroupChannel.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            name: isSet(object.name) ? globalThis.String(object.name) : "",
            groupId: isSet(object.groupId) ? globalThis.Number(object.groupId) : 0,
            channels: globalThis.Array.isArray(object?.channels)
                ? object.channels.map((e) => exports.GroupChannel.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.name !== "") {
            obj.name = message.name;
        }
        if (message.groupId !== 0) {
            obj.groupId = Math.round(message.groupId);
        }
        if (message.channels?.length) {
            obj.channels = message.channels.map((e) => exports.GroupChannel.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.GroupChat.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGroupChat();
        message.name = object.name ?? "";
        message.groupId = object.groupId ?? 0;
        message.channels = object.channels?.map((e) => exports.GroupChannel.fromPartial(e)) || [];
        return message;
    },
};
function createBaseGetGroupMembers() {
    return { groupId: 0, channelId: 0 };
}
exports.GetGroupMembers = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.groupId !== 0) {
            writer.uint32(8).int32(message.groupId);
        }
        if (message.channelId !== 0) {
            writer.uint32(16).int32(message.channelId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetGroupMembers();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.groupId = reader.int32();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.channelId = reader.int32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            groupId: isSet(object.groupId) ? globalThis.Number(object.groupId) : 0,
            channelId: isSet(object.channelId) ? globalThis.Number(object.channelId) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.groupId !== 0) {
            obj.groupId = Math.round(message.groupId);
        }
        if (message.channelId !== 0) {
            obj.channelId = Math.round(message.channelId);
        }
        return obj;
    },
    create(base) {
        return exports.GetGroupMembers.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGetGroupMembers();
        message.groupId = object.groupId ?? 0;
        message.channelId = object.channelId ?? 0;
        return message;
    },
};
function createBaseGetGroupMessages() {
    return { groupId: 0, channelId: 0, before: new Uint8Array(0), count: 0 };
}
exports.GetGroupMessages = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.groupId !== 0) {
            writer.uint32(8).int32(message.groupId);
        }
        if (message.channelId !== 0) {
            writer.uint32(16).int32(message.channelId);
        }
        if (message.before.length !== 0) {
            writer.uint32(26).bytes(message.before);
        }
        if (message.count !== 0) {
            writer.uint32(32).uint32(message.count);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetGroupMessages();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.groupId = reader.int32();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.channelId = reader.int32();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.before = reader.bytes();
                    continue;
                }
                case 4: {
                    if (tag !== 32) {
                        break;
                    }
                    message.count = reader.uint32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            groupId: isSet(object.groupId) ? globalThis.Number(object.groupId) : 0,
            channelId: isSet(object.channelId) ? globalThis.Number(object.channelId) : 0,
            before: isSet(object.before) ? bytesFromBase64(object.before) : new Uint8Array(0),
            count: isSet(object.count) ? globalThis.Number(object.count) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.groupId !== 0) {
            obj.groupId = Math.round(message.groupId);
        }
        if (message.channelId !== 0) {
            obj.channelId = Math.round(message.channelId);
        }
        if (message.before.length !== 0) {
            obj.before = base64FromBytes(message.before);
        }
        if (message.count !== 0) {
            obj.count = Math.round(message.count);
        }
        return obj;
    },
    create(base) {
        return exports.GetGroupMessages.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGetGroupMessages();
        message.groupId = object.groupId ?? 0;
        message.channelId = object.channelId ?? 0;
        message.before = object.before ?? new Uint8Array(0);
        message.count = object.count ?? 0;
        return message;
    },
};
function createBaseAddUser() {
    return { username: "", groupId: 0, channelId: 0, role: 0 };
}
exports.AddUser = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.username !== "") {
            writer.uint32(10).string(message.username);
        }
        if (message.groupId !== 0) {
            writer.uint32(16).int32(message.groupId);
        }
        if (message.channelId !== 0) {
            writer.uint32(24).int32(message.channelId);
        }
        if (message.role !== 0) {
            writer.uint32(32).int32(message.role);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAddUser();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.username = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.groupId = reader.int32();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.channelId = reader.int32();
                    continue;
                }
                case 4: {
                    if (tag !== 32) {
                        break;
                    }
                    message.role = reader.int32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            username: isSet(object.username) ? globalThis.String(object.username) : "",
            groupId: isSet(object.groupId) ? globalThis.Number(object.groupId) : 0,
            channelId: isSet(object.channelId) ? globalThis.Number(object.channelId) : 0,
            role: isSet(object.role) ? globalThis.Number(object.role) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.username !== "") {
            obj.username = message.username;
        }
        if (message.groupId !== 0) {
            obj.groupId = Math.round(message.groupId);
        }
        if (message.channelId !== 0) {
            obj.channelId = Math.round(message.channelId);
        }
        if (message.role !== 0) {
            obj.role = Math.round(message.role);
        }
        return obj;
    },
    create(base) {
        return exports.AddUser.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseAddUser();
        message.username = object.username ?? "";
        message.groupId = object.groupId ?? 0;
        message.channelId = object.channelId ?? 0;
        message.role = object.role ?? 0;
        return message;
    },
};
function createBaseRemoveUser() {
    return { username: "", channelId: 0, groupId: 0 };
}
exports.RemoveUser = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.username !== "") {
            writer.uint32(10).string(message.username);
        }
        if (message.channelId !== 0) {
            writer.uint32(16).int32(message.channelId);
        }
        if (message.groupId !== 0) {
            writer.uint32(24).int32(message.groupId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseRemoveUser();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.username = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.channelId = reader.int32();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.groupId = reader.int32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            username: isSet(object.username) ? globalThis.String(object.username) : "",
            channelId: isSet(object.channelId) ? globalThis.Number(object.channelId) : 0,
            groupId: isSet(object.groupId) ? globalThis.Number(object.groupId) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.username !== "") {
            obj.username = message.username;
        }
        if (message.channelId !== 0) {
            obj.channelId = Math.round(message.channelId);
        }
        if (message.groupId !== 0) {
            obj.groupId = Math.round(message.groupId);
        }
        return obj;
    },
    create(base) {
        return exports.RemoveUser.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseRemoveUser();
        message.username = object.username ?? "";
        message.channelId = object.channelId ?? 0;
        message.groupId = object.groupId ?? 0;
        return message;
    },
};
function createBaseGroupMember() {
    return { username: "", lastSeen: 0n, isOnline: false, role: 0, chanId: 0 };
}
exports.GroupMember = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.username !== "") {
            writer.uint32(10).string(message.username);
        }
        if (message.lastSeen !== 0n) {
            if (BigInt.asUintN(64, message.lastSeen) !== message.lastSeen) {
                throw new globalThis.Error("value provided for field message.lastSeen of type uint64 too large");
            }
            writer.uint32(16).uint64(message.lastSeen);
        }
        if (message.isOnline !== false) {
            writer.uint32(24).bool(message.isOnline);
        }
        if (message.role !== 0) {
            writer.uint32(32).int32(message.role);
        }
        if (message.chanId !== 0) {
            writer.uint32(40).int32(message.chanId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGroupMember();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.username = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.lastSeen = reader.uint64();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.isOnline = reader.bool();
                    continue;
                }
                case 4: {
                    if (tag !== 32) {
                        break;
                    }
                    message.role = reader.int32();
                    continue;
                }
                case 5: {
                    if (tag !== 40) {
                        break;
                    }
                    message.chanId = reader.int32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            username: isSet(object.username) ? globalThis.String(object.username) : "",
            lastSeen: isSet(object.lastSeen) ? BigInt(object.lastSeen) : 0n,
            isOnline: isSet(object.isOnline) ? globalThis.Boolean(object.isOnline) : false,
            role: isSet(object.role) ? globalThis.Number(object.role) : 0,
            chanId: isSet(object.chanId) ? globalThis.Number(object.chanId) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.username !== "") {
            obj.username = message.username;
        }
        if (message.lastSeen !== 0n) {
            obj.lastSeen = message.lastSeen.toString();
        }
        if (message.isOnline !== false) {
            obj.isOnline = message.isOnline;
        }
        if (message.role !== 0) {
            obj.role = Math.round(message.role);
        }
        if (message.chanId !== 0) {
            obj.chanId = Math.round(message.chanId);
        }
        return obj;
    },
    create(base) {
        return exports.GroupMember.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGroupMember();
        message.username = object.username ?? "";
        message.lastSeen = object.lastSeen ?? 0n;
        message.isOnline = object.isOnline ?? false;
        message.role = object.role ?? 0;
        message.chanId = object.chanId ?? 0;
        return message;
    },
};
function createBaseGroupChannelMessage() {
    return { id: new Uint8Array(0), groupId: 0, channelId: 0, content: "", by: "" };
}
exports.GroupChannelMessage = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.id.length !== 0) {
            writer.uint32(10).bytes(message.id);
        }
        if (message.groupId !== 0) {
            writer.uint32(16).int32(message.groupId);
        }
        if (message.channelId !== 0) {
            writer.uint32(24).int32(message.channelId);
        }
        if (message.content !== "") {
            writer.uint32(34).string(message.content);
        }
        if (message.by !== "") {
            writer.uint32(42).string(message.by);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGroupChannelMessage();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.id = reader.bytes();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.groupId = reader.int32();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.channelId = reader.int32();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.content = reader.string();
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.by = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: isSet(object.id) ? bytesFromBase64(object.id) : new Uint8Array(0),
            groupId: isSet(object.groupId) ? globalThis.Number(object.groupId) : 0,
            channelId: isSet(object.channelId) ? globalThis.Number(object.channelId) : 0,
            content: isSet(object.content) ? globalThis.String(object.content) : "",
            by: isSet(object.by) ? globalThis.String(object.by) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.id.length !== 0) {
            obj.id = base64FromBytes(message.id);
        }
        if (message.groupId !== 0) {
            obj.groupId = Math.round(message.groupId);
        }
        if (message.channelId !== 0) {
            obj.channelId = Math.round(message.channelId);
        }
        if (message.content !== "") {
            obj.content = message.content;
        }
        if (message.by !== "") {
            obj.by = message.by;
        }
        return obj;
    },
    create(base) {
        return exports.GroupChannelMessage.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGroupChannelMessage();
        message.id = object.id ?? new Uint8Array(0);
        message.groupId = object.groupId ?? 0;
        message.channelId = object.channelId ?? 0;
        message.content = object.content ?? "";
        message.by = object.by ?? "";
        return message;
    },
};
function createBaseGroupChannelMessages() {
    return { messages: [] };
}
exports.GroupChannelMessages = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        for (const v of message.messages) {
            exports.GroupChannelMessage.encode(v, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGroupChannelMessages();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.messages.push(exports.GroupChannelMessage.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            messages: globalThis.Array.isArray(object?.messages)
                ? object.messages.map((e) => exports.GroupChannelMessage.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.messages?.length) {
            obj.messages = message.messages.map((e) => exports.GroupChannelMessage.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.GroupChannelMessages.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGroupChannelMessages();
        message.messages = object.messages?.map((e) => exports.GroupChannelMessage.fromPartial(e)) || [];
        return message;
    },
};
function createBaseGroupMembers() {
    return { members: [] };
}
exports.GroupMembers = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        for (const v of message.members) {
            exports.GroupMember.encode(v, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGroupMembers();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.members.push(exports.GroupMember.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            members: globalThis.Array.isArray(object?.members) ? object.members.map((e) => exports.GroupMember.fromJSON(e)) : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.members?.length) {
            obj.members = message.members.map((e) => exports.GroupMember.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.GroupMembers.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGroupMembers();
        message.members = object.members?.map((e) => exports.GroupMember.fromPartial(e)) || [];
        return message;
    },
};
function createBaseGetUserMessages() {
    return { before: new Uint8Array(0), count: 0, from: "" };
}
exports.GetUserMessages = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.before.length !== 0) {
            writer.uint32(10).bytes(message.before);
        }
        if (message.count !== 0) {
            writer.uint32(16).int32(message.count);
        }
        if (message.from !== "") {
            writer.uint32(26).string(message.from);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetUserMessages();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.before = reader.bytes();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.count = reader.int32();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.from = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            before: isSet(object.before) ? bytesFromBase64(object.before) : new Uint8Array(0),
            count: isSet(object.count) ? globalThis.Number(object.count) : 0,
            from: isSet(object.from) ? globalThis.String(object.from) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.before.length !== 0) {
            obj.before = base64FromBytes(message.before);
        }
        if (message.count !== 0) {
            obj.count = Math.round(message.count);
        }
        if (message.from !== "") {
            obj.from = message.from;
        }
        return obj;
    },
    create(base) {
        return exports.GetUserMessages.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGetUserMessages();
        message.before = object.before ?? new Uint8Array(0);
        message.count = object.count ?? 0;
        message.from = object.from ?? "";
        return message;
    },
};
function createBaseRequest() {
    return {
        id: 0,
        getGroupMembers: undefined,
        getGroupMessages: undefined,
        addUser: undefined,
        removeUser: undefined,
        addChannel: undefined,
        deleteChannel: undefined,
        getUserMessages: undefined,
    };
}
exports.Request = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.id !== 0) {
            writer.uint32(8).int32(message.id);
        }
        if (message.getGroupMembers !== undefined) {
            exports.GetGroupMembers.encode(message.getGroupMembers, writer.uint32(18).fork()).join();
        }
        if (message.getGroupMessages !== undefined) {
            exports.GetGroupMessages.encode(message.getGroupMessages, writer.uint32(26).fork()).join();
        }
        if (message.addUser !== undefined) {
            exports.AddUser.encode(message.addUser, writer.uint32(34).fork()).join();
        }
        if (message.removeUser !== undefined) {
            exports.RemoveUser.encode(message.removeUser, writer.uint32(42).fork()).join();
        }
        if (message.addChannel !== undefined) {
            exports.GroupChannel.encode(message.addChannel, writer.uint32(50).fork()).join();
        }
        if (message.deleteChannel !== undefined) {
            exports.GroupChannel.encode(message.deleteChannel, writer.uint32(58).fork()).join();
        }
        if (message.getUserMessages !== undefined) {
            exports.GetUserMessages.encode(message.getUserMessages, writer.uint32(66).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.id = reader.int32();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.getGroupMembers = exports.GetGroupMembers.decode(reader, reader.uint32());
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.getGroupMessages = exports.GetGroupMessages.decode(reader, reader.uint32());
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.addUser = exports.AddUser.decode(reader, reader.uint32());
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.removeUser = exports.RemoveUser.decode(reader, reader.uint32());
                    continue;
                }
                case 6: {
                    if (tag !== 50) {
                        break;
                    }
                    message.addChannel = exports.GroupChannel.decode(reader, reader.uint32());
                    continue;
                }
                case 7: {
                    if (tag !== 58) {
                        break;
                    }
                    message.deleteChannel = exports.GroupChannel.decode(reader, reader.uint32());
                    continue;
                }
                case 8: {
                    if (tag !== 66) {
                        break;
                    }
                    message.getUserMessages = exports.GetUserMessages.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: isSet(object.id) ? globalThis.Number(object.id) : 0,
            getGroupMembers: isSet(object.getGroupMembers) ? exports.GetGroupMembers.fromJSON(object.getGroupMembers) : undefined,
            getGroupMessages: isSet(object.getGroupMessages) ? exports.GetGroupMessages.fromJSON(object.getGroupMessages) : undefined,
            addUser: isSet(object.addUser) ? exports.AddUser.fromJSON(object.addUser) : undefined,
            removeUser: isSet(object.removeUser) ? exports.RemoveUser.fromJSON(object.removeUser) : undefined,
            addChannel: isSet(object.addChannel) ? exports.GroupChannel.fromJSON(object.addChannel) : undefined,
            deleteChannel: isSet(object.deleteChannel) ? exports.GroupChannel.fromJSON(object.deleteChannel) : undefined,
            getUserMessages: isSet(object.getUserMessages) ? exports.GetUserMessages.fromJSON(object.getUserMessages) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.id !== 0) {
            obj.id = Math.round(message.id);
        }
        if (message.getGroupMembers !== undefined) {
            obj.getGroupMembers = exports.GetGroupMembers.toJSON(message.getGroupMembers);
        }
        if (message.getGroupMessages !== undefined) {
            obj.getGroupMessages = exports.GetGroupMessages.toJSON(message.getGroupMessages);
        }
        if (message.addUser !== undefined) {
            obj.addUser = exports.AddUser.toJSON(message.addUser);
        }
        if (message.removeUser !== undefined) {
            obj.removeUser = exports.RemoveUser.toJSON(message.removeUser);
        }
        if (message.addChannel !== undefined) {
            obj.addChannel = exports.GroupChannel.toJSON(message.addChannel);
        }
        if (message.deleteChannel !== undefined) {
            obj.deleteChannel = exports.GroupChannel.toJSON(message.deleteChannel);
        }
        if (message.getUserMessages !== undefined) {
            obj.getUserMessages = exports.GetUserMessages.toJSON(message.getUserMessages);
        }
        return obj;
    },
    create(base) {
        return exports.Request.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseRequest();
        message.id = object.id ?? 0;
        message.getGroupMembers = (object.getGroupMembers !== undefined && object.getGroupMembers !== null)
            ? exports.GetGroupMembers.fromPartial(object.getGroupMembers)
            : undefined;
        message.getGroupMessages = (object.getGroupMessages !== undefined && object.getGroupMessages !== null)
            ? exports.GetGroupMessages.fromPartial(object.getGroupMessages)
            : undefined;
        message.addUser = (object.addUser !== undefined && object.addUser !== null)
            ? exports.AddUser.fromPartial(object.addUser)
            : undefined;
        message.removeUser = (object.removeUser !== undefined && object.removeUser !== null)
            ? exports.RemoveUser.fromPartial(object.removeUser)
            : undefined;
        message.addChannel = (object.addChannel !== undefined && object.addChannel !== null)
            ? exports.GroupChannel.fromPartial(object.addChannel)
            : undefined;
        message.deleteChannel = (object.deleteChannel !== undefined && object.deleteChannel !== null)
            ? exports.GroupChannel.fromPartial(object.deleteChannel)
            : undefined;
        message.getUserMessages = (object.getUserMessages !== undefined && object.getUserMessages !== null)
            ? exports.GetUserMessages.fromPartial(object.getUserMessages)
            : undefined;
        return message;
    },
};
function createBaseError() {
    return { status: 0, error: "" };
}
exports.Error = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.status !== 0) {
            writer.uint32(8).int32(message.status);
        }
        if (message.error !== "") {
            writer.uint32(18).string(message.error);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseError();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.status = reader.int32();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.error = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            status: isSet(object.status) ? globalThis.Number(object.status) : 0,
            error: isSet(object.error) ? globalThis.String(object.error) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.status !== 0) {
            obj.status = Math.round(message.status);
        }
        if (message.error !== "") {
            obj.error = message.error;
        }
        return obj;
    },
    create(base) {
        return exports.Error.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseError();
        message.status = object.status ?? 0;
        message.error = object.error ?? "";
        return message;
    },
};
function createBaseResponse() {
    return {
        id: 0,
        error: undefined,
        groupMembers: undefined,
        groupMessages: undefined,
        userMessages: undefined,
        channel: undefined,
    };
}
exports.Response = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.id !== 0) {
            writer.uint32(8).int32(message.id);
        }
        if (message.error !== undefined) {
            exports.Error.encode(message.error, writer.uint32(18).fork()).join();
        }
        if (message.groupMembers !== undefined) {
            exports.GroupMembers.encode(message.groupMembers, writer.uint32(26).fork()).join();
        }
        if (message.groupMessages !== undefined) {
            exports.GroupChannelMessages.encode(message.groupMessages, writer.uint32(34).fork()).join();
        }
        if (message.userMessages !== undefined) {
            exports.UserMessages.encode(message.userMessages, writer.uint32(42).fork()).join();
        }
        if (message.channel !== undefined) {
            exports.GroupChannel.encode(message.channel, writer.uint32(50).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.id = reader.int32();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.error = exports.Error.decode(reader, reader.uint32());
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.groupMembers = exports.GroupMembers.decode(reader, reader.uint32());
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.groupMessages = exports.GroupChannelMessages.decode(reader, reader.uint32());
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.userMessages = exports.UserMessages.decode(reader, reader.uint32());
                    continue;
                }
                case 6: {
                    if (tag !== 50) {
                        break;
                    }
                    message.channel = exports.GroupChannel.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: isSet(object.id) ? globalThis.Number(object.id) : 0,
            error: isSet(object.error) ? exports.Error.fromJSON(object.error) : undefined,
            groupMembers: isSet(object.groupMembers) ? exports.GroupMembers.fromJSON(object.groupMembers) : undefined,
            groupMessages: isSet(object.groupMessages) ? exports.GroupChannelMessages.fromJSON(object.groupMessages) : undefined,
            userMessages: isSet(object.userMessages) ? exports.UserMessages.fromJSON(object.userMessages) : undefined,
            channel: isSet(object.channel) ? exports.GroupChannel.fromJSON(object.channel) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.id !== 0) {
            obj.id = Math.round(message.id);
        }
        if (message.error !== undefined) {
            obj.error = exports.Error.toJSON(message.error);
        }
        if (message.groupMembers !== undefined) {
            obj.groupMembers = exports.GroupMembers.toJSON(message.groupMembers);
        }
        if (message.groupMessages !== undefined) {
            obj.groupMessages = exports.GroupChannelMessages.toJSON(message.groupMessages);
        }
        if (message.userMessages !== undefined) {
            obj.userMessages = exports.UserMessages.toJSON(message.userMessages);
        }
        if (message.channel !== undefined) {
            obj.channel = exports.GroupChannel.toJSON(message.channel);
        }
        return obj;
    },
    create(base) {
        return exports.Response.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseResponse();
        message.id = object.id ?? 0;
        message.error = (object.error !== undefined && object.error !== null) ? exports.Error.fromPartial(object.error) : undefined;
        message.groupMembers = (object.groupMembers !== undefined && object.groupMembers !== null)
            ? exports.GroupMembers.fromPartial(object.groupMembers)
            : undefined;
        message.groupMessages = (object.groupMessages !== undefined && object.groupMessages !== null)
            ? exports.GroupChannelMessages.fromPartial(object.groupMessages)
            : undefined;
        message.userMessages = (object.userMessages !== undefined && object.userMessages !== null)
            ? exports.UserMessages.fromPartial(object.userMessages)
            : undefined;
        message.channel = (object.channel !== undefined && object.channel !== null)
            ? exports.GroupChannel.fromPartial(object.channel)
            : undefined;
        return message;
    },
};
function createBaseClientMessage() {
    return {
        request: undefined,
        groupMessage: undefined,
        authToken: undefined,
        currentGroup: undefined,
        userMessage: undefined,
    };
}
exports.ClientMessage = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.request !== undefined) {
            exports.Request.encode(message.request, writer.uint32(18).fork()).join();
        }
        if (message.groupMessage !== undefined) {
            exports.GroupChannelMessage.encode(message.groupMessage, writer.uint32(26).fork()).join();
        }
        if (message.authToken !== undefined) {
            exports.AuthenticationToken.encode(message.authToken, writer.uint32(34).fork()).join();
        }
        if (message.currentGroup !== undefined) {
            writer.uint32(40).int32(message.currentGroup);
        }
        if (message.userMessage !== undefined) {
            exports.UserMessage.encode(message.userMessage, writer.uint32(50).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseClientMessage();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.request = exports.Request.decode(reader, reader.uint32());
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.groupMessage = exports.GroupChannelMessage.decode(reader, reader.uint32());
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.authToken = exports.AuthenticationToken.decode(reader, reader.uint32());
                    continue;
                }
                case 5: {
                    if (tag !== 40) {
                        break;
                    }
                    message.currentGroup = reader.int32();
                    continue;
                }
                case 6: {
                    if (tag !== 50) {
                        break;
                    }
                    message.userMessage = exports.UserMessage.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            request: isSet(object.request) ? exports.Request.fromJSON(object.request) : undefined,
            groupMessage: isSet(object.groupMessage) ? exports.GroupChannelMessage.fromJSON(object.groupMessage) : undefined,
            authToken: isSet(object.authToken) ? exports.AuthenticationToken.fromJSON(object.authToken) : undefined,
            currentGroup: isSet(object.currentGroup) ? globalThis.Number(object.currentGroup) : undefined,
            userMessage: isSet(object.userMessage) ? exports.UserMessage.fromJSON(object.userMessage) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.request !== undefined) {
            obj.request = exports.Request.toJSON(message.request);
        }
        if (message.groupMessage !== undefined) {
            obj.groupMessage = exports.GroupChannelMessage.toJSON(message.groupMessage);
        }
        if (message.authToken !== undefined) {
            obj.authToken = exports.AuthenticationToken.toJSON(message.authToken);
        }
        if (message.currentGroup !== undefined) {
            obj.currentGroup = Math.round(message.currentGroup);
        }
        if (message.userMessage !== undefined) {
            obj.userMessage = exports.UserMessage.toJSON(message.userMessage);
        }
        return obj;
    },
    create(base) {
        return exports.ClientMessage.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseClientMessage();
        message.request = (object.request !== undefined && object.request !== null)
            ? exports.Request.fromPartial(object.request)
            : undefined;
        message.groupMessage = (object.groupMessage !== undefined && object.groupMessage !== null)
            ? exports.GroupChannelMessage.fromPartial(object.groupMessage)
            : undefined;
        message.authToken = (object.authToken !== undefined && object.authToken !== null)
            ? exports.AuthenticationToken.fromPartial(object.authToken)
            : undefined;
        message.currentGroup = object.currentGroup ?? undefined;
        message.userMessage = (object.userMessage !== undefined && object.userMessage !== null)
            ? exports.UserMessage.fromPartial(object.userMessage)
            : undefined;
        return message;
    },
};
function createBaseServerMessage() {
    return {
        response: undefined,
        groupChats: undefined,
        groupChat: undefined,
        groupMessage: undefined,
        userMessage: undefined,
        userChats: undefined,
    };
}
exports.ServerMessage = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.response !== undefined) {
            exports.Response.encode(message.response, writer.uint32(10).fork()).join();
        }
        if (message.groupChats !== undefined) {
            exports.GroupChats.encode(message.groupChats, writer.uint32(18).fork()).join();
        }
        if (message.groupChat !== undefined) {
            exports.GroupChat.encode(message.groupChat, writer.uint32(26).fork()).join();
        }
        if (message.groupMessage !== undefined) {
            exports.GroupChannelMessage.encode(message.groupMessage, writer.uint32(34).fork()).join();
        }
        if (message.userMessage !== undefined) {
            exports.UserMessage.encode(message.userMessage, writer.uint32(42).fork()).join();
        }
        if (message.userChats !== undefined) {
            exports.UserMessages.encode(message.userChats, writer.uint32(50).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseServerMessage();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.response = exports.Response.decode(reader, reader.uint32());
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.groupChats = exports.GroupChats.decode(reader, reader.uint32());
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.groupChat = exports.GroupChat.decode(reader, reader.uint32());
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.groupMessage = exports.GroupChannelMessage.decode(reader, reader.uint32());
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.userMessage = exports.UserMessage.decode(reader, reader.uint32());
                    continue;
                }
                case 6: {
                    if (tag !== 50) {
                        break;
                    }
                    message.userChats = exports.UserMessages.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            response: isSet(object.response) ? exports.Response.fromJSON(object.response) : undefined,
            groupChats: isSet(object.groupChats) ? exports.GroupChats.fromJSON(object.groupChats) : undefined,
            groupChat: isSet(object.groupChat) ? exports.GroupChat.fromJSON(object.groupChat) : undefined,
            groupMessage: isSet(object.groupMessage) ? exports.GroupChannelMessage.fromJSON(object.groupMessage) : undefined,
            userMessage: isSet(object.userMessage) ? exports.UserMessage.fromJSON(object.userMessage) : undefined,
            userChats: isSet(object.userChats) ? exports.UserMessages.fromJSON(object.userChats) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.response !== undefined) {
            obj.response = exports.Response.toJSON(message.response);
        }
        if (message.groupChats !== undefined) {
            obj.groupChats = exports.GroupChats.toJSON(message.groupChats);
        }
        if (message.groupChat !== undefined) {
            obj.groupChat = exports.GroupChat.toJSON(message.groupChat);
        }
        if (message.groupMessage !== undefined) {
            obj.groupMessage = exports.GroupChannelMessage.toJSON(message.groupMessage);
        }
        if (message.userMessage !== undefined) {
            obj.userMessage = exports.UserMessage.toJSON(message.userMessage);
        }
        if (message.userChats !== undefined) {
            obj.userChats = exports.UserMessages.toJSON(message.userChats);
        }
        return obj;
    },
    create(base) {
        return exports.ServerMessage.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseServerMessage();
        message.response = (object.response !== undefined && object.response !== null)
            ? exports.Response.fromPartial(object.response)
            : undefined;
        message.groupChats = (object.groupChats !== undefined && object.groupChats !== null)
            ? exports.GroupChats.fromPartial(object.groupChats)
            : undefined;
        message.groupChat = (object.groupChat !== undefined && object.groupChat !== null)
            ? exports.GroupChat.fromPartial(object.groupChat)
            : undefined;
        message.groupMessage = (object.groupMessage !== undefined && object.groupMessage !== null)
            ? exports.GroupChannelMessage.fromPartial(object.groupMessage)
            : undefined;
        message.userMessage = (object.userMessage !== undefined && object.userMessage !== null)
            ? exports.UserMessage.fromPartial(object.userMessage)
            : undefined;
        message.userChats = (object.userChats !== undefined && object.userChats !== null)
            ? exports.UserMessages.fromPartial(object.userChats)
            : undefined;
        return message;
    },
};
function createBaseUserMessage() {
    return { id: new Uint8Array(0), version: 0, text: "", to: "", from: "" };
}
exports.UserMessage = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.id.length !== 0) {
            writer.uint32(10).bytes(message.id);
        }
        if (message.version !== 0) {
            writer.uint32(16).int32(message.version);
        }
        if (message.text !== "") {
            writer.uint32(26).string(message.text);
        }
        if (message.to !== "") {
            writer.uint32(34).string(message.to);
        }
        if (message.from !== "") {
            writer.uint32(42).string(message.from);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUserMessage();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.id = reader.bytes();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.version = reader.int32();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.text = reader.string();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.to = reader.string();
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.from = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: isSet(object.id) ? bytesFromBase64(object.id) : new Uint8Array(0),
            version: isSet(object.version) ? globalThis.Number(object.version) : 0,
            text: isSet(object.text) ? globalThis.String(object.text) : "",
            to: isSet(object.to) ? globalThis.String(object.to) : "",
            from: isSet(object.from) ? globalThis.String(object.from) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.id.length !== 0) {
            obj.id = base64FromBytes(message.id);
        }
        if (message.version !== 0) {
            obj.version = Math.round(message.version);
        }
        if (message.text !== "") {
            obj.text = message.text;
        }
        if (message.to !== "") {
            obj.to = message.to;
        }
        if (message.from !== "") {
            obj.from = message.from;
        }
        return obj;
    },
    create(base) {
        return exports.UserMessage.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseUserMessage();
        message.id = object.id ?? new Uint8Array(0);
        message.version = object.version ?? 0;
        message.text = object.text ?? "";
        message.to = object.to ?? "";
        message.from = object.from ?? "";
        return message;
    },
};
function createBaseUserMessages() {
    return { messages: [] };
}
exports.UserMessages = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        for (const v of message.messages) {
            exports.UserMessage.encode(v, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUserMessages();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.messages.push(exports.UserMessage.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            messages: globalThis.Array.isArray(object?.messages)
                ? object.messages.map((e) => exports.UserMessage.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.messages?.length) {
            obj.messages = message.messages.map((e) => exports.UserMessage.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.UserMessages.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseUserMessages();
        message.messages = object.messages?.map((e) => exports.UserMessage.fromPartial(e)) || [];
        return message;
    },
};
function bytesFromBase64(b64) {
    const bin = globalThis.atob(b64);
    const arr = new Uint8Array(bin.length);
    for (let i = 0; i < bin.length; ++i) {
        arr[i] = bin.charCodeAt(i);
    }
    return arr;
}
function base64FromBytes(arr) {
    const bin = [];
    arr.forEach((byte) => {
        bin.push(globalThis.String.fromCharCode(byte));
    });
    return globalThis.btoa(bin.join(""));
}
function isSet(value) {
    return value !== null && value !== undefined;
}
