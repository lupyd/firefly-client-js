"use strict";
// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               v6.32.1
// source: message.proto
Object.defineProperty(exports, "__esModule", { value: true });
exports.UserMessageInner = exports.Conversations = exports.Conversation = exports.PreKeyBundles = exports.ConversationStart = exports.PreKeyBundle = exports.FireflyGroupChannels = exports.FireflyGroupChannel = exports.FireflyGroupMembers = exports.FireflyGroupMember = exports.FireflyGroupRoles = exports.FireflyGroupRole = exports.FireflyGroupExtension = exports.FireflyClient = exports.SignedToken = exports.AuthToken = exports.GroupId = exports.ClientMessage = exports.UnSubscribeGroup = exports.SubscribeGroup = exports.ServerMessage = exports.GroupMessages = exports.GroupKeyPackages = exports.GroupKeyPackage = exports.GroupMessage = exports.GroupInvites = exports.GroupInvite = exports.UserMessages = exports.Groups = exports.Group = exports.UserMessage = exports.protobufPackage = void 0;
/* eslint-disable */
const wire_1 = require("@bufbuild/protobuf/wire");
exports.protobufPackage = "firefly";
function createBaseUserMessage() {
    return { id: new Uint8Array(0), to: "", from: "", text: new Uint8Array(0), conversationId: 0n, type: 0 };
}
exports.UserMessage = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.id.length !== 0) {
            writer.uint32(10).bytes(message.id);
        }
        if (message.to !== "") {
            writer.uint32(18).string(message.to);
        }
        if (message.from !== "") {
            writer.uint32(26).string(message.from);
        }
        if (message.text.length !== 0) {
            writer.uint32(34).bytes(message.text);
        }
        if (message.conversationId !== 0n) {
            if (BigInt.asUintN(64, message.conversationId) !== message.conversationId) {
                throw new globalThis.Error("value provided for field message.conversationId of type uint64 too large");
            }
            writer.uint32(40).uint64(message.conversationId);
        }
        if (message.type !== 0) {
            writer.uint32(48).uint32(message.type);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUserMessage();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.id = reader.bytes();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.to = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.from = reader.string();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.text = reader.bytes();
                    continue;
                }
                case 5: {
                    if (tag !== 40) {
                        break;
                    }
                    message.conversationId = reader.uint64();
                    continue;
                }
                case 6: {
                    if (tag !== 48) {
                        break;
                    }
                    message.type = reader.uint32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: isSet(object.id) ? bytesFromBase64(object.id) : new Uint8Array(0),
            to: isSet(object.to) ? globalThis.String(object.to) : "",
            from: isSet(object.from) ? globalThis.String(object.from) : "",
            text: isSet(object.text) ? bytesFromBase64(object.text) : new Uint8Array(0),
            conversationId: isSet(object.conversationId) ? BigInt(object.conversationId) : 0n,
            type: isSet(object.type) ? globalThis.Number(object.type) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.id.length !== 0) {
            obj.id = base64FromBytes(message.id);
        }
        if (message.to !== "") {
            obj.to = message.to;
        }
        if (message.from !== "") {
            obj.from = message.from;
        }
        if (message.text.length !== 0) {
            obj.text = base64FromBytes(message.text);
        }
        if (message.conversationId !== 0n) {
            obj.conversationId = message.conversationId.toString();
        }
        if (message.type !== 0) {
            obj.type = Math.round(message.type);
        }
        return obj;
    },
    create(base) {
        return exports.UserMessage.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseUserMessage();
        message.id = object.id ?? new Uint8Array(0);
        message.to = object.to ?? "";
        message.from = object.from ?? "";
        message.text = object.text ?? new Uint8Array(0);
        message.conversationId = object.conversationId ?? 0n;
        message.type = object.type ?? 0;
        return message;
    },
};
function createBaseGroup() {
    return { id: 0n, name: "", description: "", pfp: false, state: new Uint8Array(0) };
}
exports.Group = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.id !== 0n) {
            if (BigInt.asUintN(64, message.id) !== message.id) {
                throw new globalThis.Error("value provided for field message.id of type uint64 too large");
            }
            writer.uint32(8).uint64(message.id);
        }
        if (message.name !== "") {
            writer.uint32(18).string(message.name);
        }
        if (message.description !== "") {
            writer.uint32(26).string(message.description);
        }
        if (message.pfp !== false) {
            writer.uint32(32).bool(message.pfp);
        }
        if (message.state.length !== 0) {
            writer.uint32(42).bytes(message.state);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGroup();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.id = reader.uint64();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.name = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.description = reader.string();
                    continue;
                }
                case 4: {
                    if (tag !== 32) {
                        break;
                    }
                    message.pfp = reader.bool();
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.state = reader.bytes();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: isSet(object.id) ? BigInt(object.id) : 0n,
            name: isSet(object.name) ? globalThis.String(object.name) : "",
            description: isSet(object.description) ? globalThis.String(object.description) : "",
            pfp: isSet(object.pfp) ? globalThis.Boolean(object.pfp) : false,
            state: isSet(object.state) ? bytesFromBase64(object.state) : new Uint8Array(0),
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.id !== 0n) {
            obj.id = message.id.toString();
        }
        if (message.name !== "") {
            obj.name = message.name;
        }
        if (message.description !== "") {
            obj.description = message.description;
        }
        if (message.pfp !== false) {
            obj.pfp = message.pfp;
        }
        if (message.state.length !== 0) {
            obj.state = base64FromBytes(message.state);
        }
        return obj;
    },
    create(base) {
        return exports.Group.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGroup();
        message.id = object.id ?? 0n;
        message.name = object.name ?? "";
        message.description = object.description ?? "";
        message.pfp = object.pfp ?? false;
        message.state = object.state ?? new Uint8Array(0);
        return message;
    },
};
function createBaseGroups() {
    return { groups: [] };
}
exports.Groups = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        for (const v of message.groups) {
            exports.Group.encode(v, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGroups();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.groups.push(exports.Group.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { groups: globalThis.Array.isArray(object?.groups) ? object.groups.map((e) => exports.Group.fromJSON(e)) : [] };
    },
    toJSON(message) {
        const obj = {};
        if (message.groups?.length) {
            obj.groups = message.groups.map((e) => exports.Group.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.Groups.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGroups();
        message.groups = object.groups?.map((e) => exports.Group.fromPartial(e)) || [];
        return message;
    },
};
function createBaseUserMessages() {
    return { messages: [] };
}
exports.UserMessages = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        for (const v of message.messages) {
            exports.UserMessage.encode(v, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUserMessages();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.messages.push(exports.UserMessage.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            messages: globalThis.Array.isArray(object?.messages)
                ? object.messages.map((e) => exports.UserMessage.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.messages?.length) {
            obj.messages = message.messages.map((e) => exports.UserMessage.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.UserMessages.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseUserMessages();
        message.messages = object.messages?.map((e) => exports.UserMessage.fromPartial(e)) || [];
        return message;
    },
};
function createBaseGroupInvite() {
    return { groupId: 0n, inviter: "", invitee: "", welcomeMessage: new Uint8Array(0), commitId: new Uint8Array(0) };
}
exports.GroupInvite = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.groupId !== 0n) {
            if (BigInt.asUintN(64, message.groupId) !== message.groupId) {
                throw new globalThis.Error("value provided for field message.groupId of type uint64 too large");
            }
            writer.uint32(8).uint64(message.groupId);
        }
        if (message.inviter !== "") {
            writer.uint32(18).string(message.inviter);
        }
        if (message.invitee !== "") {
            writer.uint32(26).string(message.invitee);
        }
        if (message.welcomeMessage.length !== 0) {
            writer.uint32(34).bytes(message.welcomeMessage);
        }
        if (message.commitId.length !== 0) {
            writer.uint32(42).bytes(message.commitId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGroupInvite();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.groupId = reader.uint64();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.inviter = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.invitee = reader.string();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.welcomeMessage = reader.bytes();
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.commitId = reader.bytes();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            groupId: isSet(object.groupId) ? BigInt(object.groupId) : 0n,
            inviter: isSet(object.inviter) ? globalThis.String(object.inviter) : "",
            invitee: isSet(object.invitee) ? globalThis.String(object.invitee) : "",
            welcomeMessage: isSet(object.welcomeMessage) ? bytesFromBase64(object.welcomeMessage) : new Uint8Array(0),
            commitId: isSet(object.commitId) ? bytesFromBase64(object.commitId) : new Uint8Array(0),
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.groupId !== 0n) {
            obj.groupId = message.groupId.toString();
        }
        if (message.inviter !== "") {
            obj.inviter = message.inviter;
        }
        if (message.invitee !== "") {
            obj.invitee = message.invitee;
        }
        if (message.welcomeMessage.length !== 0) {
            obj.welcomeMessage = base64FromBytes(message.welcomeMessage);
        }
        if (message.commitId.length !== 0) {
            obj.commitId = base64FromBytes(message.commitId);
        }
        return obj;
    },
    create(base) {
        return exports.GroupInvite.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGroupInvite();
        message.groupId = object.groupId ?? 0n;
        message.inviter = object.inviter ?? "";
        message.invitee = object.invitee ?? "";
        message.welcomeMessage = object.welcomeMessage ?? new Uint8Array(0);
        message.commitId = object.commitId ?? new Uint8Array(0);
        return message;
    },
};
function createBaseGroupInvites() {
    return { invites: [] };
}
exports.GroupInvites = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        for (const v of message.invites) {
            exports.GroupInvite.encode(v, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGroupInvites();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.invites.push(exports.GroupInvite.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            invites: globalThis.Array.isArray(object?.invites) ? object.invites.map((e) => exports.GroupInvite.fromJSON(e)) : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.invites?.length) {
            obj.invites = message.invites.map((e) => exports.GroupInvite.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.GroupInvites.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGroupInvites();
        message.invites = object.invites?.map((e) => exports.GroupInvite.fromPartial(e)) || [];
        return message;
    },
};
function createBaseGroupMessage() {
    return { id: new Uint8Array(0), groupId: 0n, message: new Uint8Array(0) };
}
exports.GroupMessage = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.id.length !== 0) {
            writer.uint32(10).bytes(message.id);
        }
        if (message.groupId !== 0n) {
            if (BigInt.asUintN(64, message.groupId) !== message.groupId) {
                throw new globalThis.Error("value provided for field message.groupId of type uint64 too large");
            }
            writer.uint32(16).uint64(message.groupId);
        }
        if (message.message.length !== 0) {
            writer.uint32(26).bytes(message.message);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGroupMessage();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.id = reader.bytes();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.groupId = reader.uint64();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.message = reader.bytes();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: isSet(object.id) ? bytesFromBase64(object.id) : new Uint8Array(0),
            groupId: isSet(object.groupId) ? BigInt(object.groupId) : 0n,
            message: isSet(object.message) ? bytesFromBase64(object.message) : new Uint8Array(0),
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.id.length !== 0) {
            obj.id = base64FromBytes(message.id);
        }
        if (message.groupId !== 0n) {
            obj.groupId = message.groupId.toString();
        }
        if (message.message.length !== 0) {
            obj.message = base64FromBytes(message.message);
        }
        return obj;
    },
    create(base) {
        return exports.GroupMessage.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGroupMessage();
        message.id = object.id ?? new Uint8Array(0);
        message.groupId = object.groupId ?? 0n;
        message.message = object.message ?? new Uint8Array(0);
        return message;
    },
};
function createBaseGroupKeyPackage() {
    return { id: 0, package: new Uint8Array(0) };
}
exports.GroupKeyPackage = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.id !== 0) {
            writer.uint32(8).int32(message.id);
        }
        if (message.package.length !== 0) {
            writer.uint32(18).bytes(message.package);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGroupKeyPackage();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.id = reader.int32();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.package = reader.bytes();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: isSet(object.id) ? globalThis.Number(object.id) : 0,
            package: isSet(object.package) ? bytesFromBase64(object.package) : new Uint8Array(0),
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.id !== 0) {
            obj.id = Math.round(message.id);
        }
        if (message.package.length !== 0) {
            obj.package = base64FromBytes(message.package);
        }
        return obj;
    },
    create(base) {
        return exports.GroupKeyPackage.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGroupKeyPackage();
        message.id = object.id ?? 0;
        message.package = object.package ?? new Uint8Array(0);
        return message;
    },
};
function createBaseGroupKeyPackages() {
    return { packages: [] };
}
exports.GroupKeyPackages = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        for (const v of message.packages) {
            exports.GroupKeyPackage.encode(v, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGroupKeyPackages();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.packages.push(exports.GroupKeyPackage.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            packages: globalThis.Array.isArray(object?.packages)
                ? object.packages.map((e) => exports.GroupKeyPackage.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.packages?.length) {
            obj.packages = message.packages.map((e) => exports.GroupKeyPackage.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.GroupKeyPackages.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGroupKeyPackages();
        message.packages = object.packages?.map((e) => exports.GroupKeyPackage.fromPartial(e)) || [];
        return message;
    },
};
function createBaseGroupMessages() {
    return { messages: [] };
}
exports.GroupMessages = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        for (const v of message.messages) {
            exports.GroupMessage.encode(v, writer.uint32(18).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGroupMessages();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.messages.push(exports.GroupMessage.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            messages: globalThis.Array.isArray(object?.messages)
                ? object.messages.map((e) => exports.GroupMessage.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.messages?.length) {
            obj.messages = message.messages.map((e) => exports.GroupMessage.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.GroupMessages.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGroupMessages();
        message.messages = object.messages?.map((e) => exports.GroupMessage.fromPartial(e)) || [];
        return message;
    },
};
function createBaseServerMessage() {
    return { userMessage: undefined, groupMessage: undefined, userMessages: undefined, groupMessages: undefined };
}
exports.ServerMessage = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.userMessage !== undefined) {
            exports.UserMessage.encode(message.userMessage, writer.uint32(10).fork()).join();
        }
        if (message.groupMessage !== undefined) {
            exports.GroupMessage.encode(message.groupMessage, writer.uint32(18).fork()).join();
        }
        if (message.userMessages !== undefined) {
            exports.UserMessages.encode(message.userMessages, writer.uint32(26).fork()).join();
        }
        if (message.groupMessages !== undefined) {
            exports.GroupMessages.encode(message.groupMessages, writer.uint32(34).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseServerMessage();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.userMessage = exports.UserMessage.decode(reader, reader.uint32());
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.groupMessage = exports.GroupMessage.decode(reader, reader.uint32());
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.userMessages = exports.UserMessages.decode(reader, reader.uint32());
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.groupMessages = exports.GroupMessages.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            userMessage: isSet(object.userMessage) ? exports.UserMessage.fromJSON(object.userMessage) : undefined,
            groupMessage: isSet(object.groupMessage) ? exports.GroupMessage.fromJSON(object.groupMessage) : undefined,
            userMessages: isSet(object.userMessages) ? exports.UserMessages.fromJSON(object.userMessages) : undefined,
            groupMessages: isSet(object.groupMessages) ? exports.GroupMessages.fromJSON(object.groupMessages) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.userMessage !== undefined) {
            obj.userMessage = exports.UserMessage.toJSON(message.userMessage);
        }
        if (message.groupMessage !== undefined) {
            obj.groupMessage = exports.GroupMessage.toJSON(message.groupMessage);
        }
        if (message.userMessages !== undefined) {
            obj.userMessages = exports.UserMessages.toJSON(message.userMessages);
        }
        if (message.groupMessages !== undefined) {
            obj.groupMessages = exports.GroupMessages.toJSON(message.groupMessages);
        }
        return obj;
    },
    create(base) {
        return exports.ServerMessage.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseServerMessage();
        message.userMessage = (object.userMessage !== undefined && object.userMessage !== null)
            ? exports.UserMessage.fromPartial(object.userMessage)
            : undefined;
        message.groupMessage = (object.groupMessage !== undefined && object.groupMessage !== null)
            ? exports.GroupMessage.fromPartial(object.groupMessage)
            : undefined;
        message.userMessages = (object.userMessages !== undefined && object.userMessages !== null)
            ? exports.UserMessages.fromPartial(object.userMessages)
            : undefined;
        message.groupMessages = (object.groupMessages !== undefined && object.groupMessages !== null)
            ? exports.GroupMessages.fromPartial(object.groupMessages)
            : undefined;
        return message;
    },
};
function createBaseSubscribeGroup() {
    return { id: 0n };
}
exports.SubscribeGroup = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.id !== 0n) {
            if (BigInt.asUintN(64, message.id) !== message.id) {
                throw new globalThis.Error("value provided for field message.id of type uint64 too large");
            }
            writer.uint32(8).uint64(message.id);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseSubscribeGroup();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.id = reader.uint64();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { id: isSet(object.id) ? BigInt(object.id) : 0n };
    },
    toJSON(message) {
        const obj = {};
        if (message.id !== 0n) {
            obj.id = message.id.toString();
        }
        return obj;
    },
    create(base) {
        return exports.SubscribeGroup.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseSubscribeGroup();
        message.id = object.id ?? 0n;
        return message;
    },
};
function createBaseUnSubscribeGroup() {
    return { id: 0n };
}
exports.UnSubscribeGroup = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.id !== 0n) {
            if (BigInt.asUintN(64, message.id) !== message.id) {
                throw new globalThis.Error("value provided for field message.id of type uint64 too large");
            }
            writer.uint32(16).uint64(message.id);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUnSubscribeGroup();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.id = reader.uint64();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { id: isSet(object.id) ? BigInt(object.id) : 0n };
    },
    toJSON(message) {
        const obj = {};
        if (message.id !== 0n) {
            obj.id = message.id.toString();
        }
        return obj;
    },
    create(base) {
        return exports.UnSubscribeGroup.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseUnSubscribeGroup();
        message.id = object.id ?? 0n;
        return message;
    },
};
function createBaseClientMessage() {
    return {
        userMessage: undefined,
        groupMessage: undefined,
        userMessages: undefined,
        groupMessages: undefined,
        bearerToken: undefined,
        subscribeGroup: undefined,
        unSubscribeGroup: undefined,
    };
}
exports.ClientMessage = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.userMessage !== undefined) {
            exports.UserMessage.encode(message.userMessage, writer.uint32(10).fork()).join();
        }
        if (message.groupMessage !== undefined) {
            exports.GroupMessage.encode(message.groupMessage, writer.uint32(18).fork()).join();
        }
        if (message.userMessages !== undefined) {
            exports.UserMessages.encode(message.userMessages, writer.uint32(26).fork()).join();
        }
        if (message.groupMessages !== undefined) {
            exports.GroupMessages.encode(message.groupMessages, writer.uint32(34).fork()).join();
        }
        if (message.bearerToken !== undefined) {
            writer.uint32(42).string(message.bearerToken);
        }
        if (message.subscribeGroup !== undefined) {
            exports.SubscribeGroup.encode(message.subscribeGroup, writer.uint32(50).fork()).join();
        }
        if (message.unSubscribeGroup !== undefined) {
            exports.UnSubscribeGroup.encode(message.unSubscribeGroup, writer.uint32(58).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseClientMessage();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.userMessage = exports.UserMessage.decode(reader, reader.uint32());
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.groupMessage = exports.GroupMessage.decode(reader, reader.uint32());
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.userMessages = exports.UserMessages.decode(reader, reader.uint32());
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.groupMessages = exports.GroupMessages.decode(reader, reader.uint32());
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.bearerToken = reader.string();
                    continue;
                }
                case 6: {
                    if (tag !== 50) {
                        break;
                    }
                    message.subscribeGroup = exports.SubscribeGroup.decode(reader, reader.uint32());
                    continue;
                }
                case 7: {
                    if (tag !== 58) {
                        break;
                    }
                    message.unSubscribeGroup = exports.UnSubscribeGroup.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            userMessage: isSet(object.userMessage) ? exports.UserMessage.fromJSON(object.userMessage) : undefined,
            groupMessage: isSet(object.groupMessage) ? exports.GroupMessage.fromJSON(object.groupMessage) : undefined,
            userMessages: isSet(object.userMessages) ? exports.UserMessages.fromJSON(object.userMessages) : undefined,
            groupMessages: isSet(object.groupMessages) ? exports.GroupMessages.fromJSON(object.groupMessages) : undefined,
            bearerToken: isSet(object.bearerToken) ? globalThis.String(object.bearerToken) : undefined,
            subscribeGroup: isSet(object.subscribeGroup) ? exports.SubscribeGroup.fromJSON(object.subscribeGroup) : undefined,
            unSubscribeGroup: isSet(object.unSubscribeGroup) ? exports.UnSubscribeGroup.fromJSON(object.unSubscribeGroup) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.userMessage !== undefined) {
            obj.userMessage = exports.UserMessage.toJSON(message.userMessage);
        }
        if (message.groupMessage !== undefined) {
            obj.groupMessage = exports.GroupMessage.toJSON(message.groupMessage);
        }
        if (message.userMessages !== undefined) {
            obj.userMessages = exports.UserMessages.toJSON(message.userMessages);
        }
        if (message.groupMessages !== undefined) {
            obj.groupMessages = exports.GroupMessages.toJSON(message.groupMessages);
        }
        if (message.bearerToken !== undefined) {
            obj.bearerToken = message.bearerToken;
        }
        if (message.subscribeGroup !== undefined) {
            obj.subscribeGroup = exports.SubscribeGroup.toJSON(message.subscribeGroup);
        }
        if (message.unSubscribeGroup !== undefined) {
            obj.unSubscribeGroup = exports.UnSubscribeGroup.toJSON(message.unSubscribeGroup);
        }
        return obj;
    },
    create(base) {
        return exports.ClientMessage.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseClientMessage();
        message.userMessage = (object.userMessage !== undefined && object.userMessage !== null)
            ? exports.UserMessage.fromPartial(object.userMessage)
            : undefined;
        message.groupMessage = (object.groupMessage !== undefined && object.groupMessage !== null)
            ? exports.GroupMessage.fromPartial(object.groupMessage)
            : undefined;
        message.userMessages = (object.userMessages !== undefined && object.userMessages !== null)
            ? exports.UserMessages.fromPartial(object.userMessages)
            : undefined;
        message.groupMessages = (object.groupMessages !== undefined && object.groupMessages !== null)
            ? exports.GroupMessages.fromPartial(object.groupMessages)
            : undefined;
        message.bearerToken = object.bearerToken ?? undefined;
        message.subscribeGroup = (object.subscribeGroup !== undefined && object.subscribeGroup !== null)
            ? exports.SubscribeGroup.fromPartial(object.subscribeGroup)
            : undefined;
        message.unSubscribeGroup = (object.unSubscribeGroup !== undefined && object.unSubscribeGroup !== null)
            ? exports.UnSubscribeGroup.fromPartial(object.unSubscribeGroup)
            : undefined;
        return message;
    },
};
function createBaseGroupId() {
    return { id: 0n };
}
exports.GroupId = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.id !== 0n) {
            if (BigInt.asUintN(64, message.id) !== message.id) {
                throw new globalThis.Error("value provided for field message.id of type uint64 too large");
            }
            writer.uint32(16).uint64(message.id);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGroupId();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.id = reader.uint64();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { id: isSet(object.id) ? BigInt(object.id) : 0n };
    },
    toJSON(message) {
        const obj = {};
        if (message.id !== 0n) {
            obj.id = message.id.toString();
        }
        return obj;
    },
    create(base) {
        return exports.GroupId.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGroupId();
        message.id = object.id ?? 0n;
        return message;
    },
};
function createBaseAuthToken() {
    return { username: "", validUntil: 0n, issuer: "", credential: new Uint8Array(0) };
}
exports.AuthToken = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.username !== "") {
            writer.uint32(10).string(message.username);
        }
        if (message.validUntil !== 0n) {
            if (BigInt.asUintN(64, message.validUntil) !== message.validUntil) {
                throw new globalThis.Error("value provided for field message.validUntil of type uint64 too large");
            }
            writer.uint32(16).uint64(message.validUntil);
        }
        if (message.issuer !== "") {
            writer.uint32(26).string(message.issuer);
        }
        if (message.credential.length !== 0) {
            writer.uint32(34).bytes(message.credential);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAuthToken();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.username = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.validUntil = reader.uint64();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.issuer = reader.string();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.credential = reader.bytes();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            username: isSet(object.username) ? globalThis.String(object.username) : "",
            validUntil: isSet(object.validUntil) ? BigInt(object.validUntil) : 0n,
            issuer: isSet(object.issuer) ? globalThis.String(object.issuer) : "",
            credential: isSet(object.credential) ? bytesFromBase64(object.credential) : new Uint8Array(0),
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.username !== "") {
            obj.username = message.username;
        }
        if (message.validUntil !== 0n) {
            obj.validUntil = message.validUntil.toString();
        }
        if (message.issuer !== "") {
            obj.issuer = message.issuer;
        }
        if (message.credential.length !== 0) {
            obj.credential = base64FromBytes(message.credential);
        }
        return obj;
    },
    create(base) {
        return exports.AuthToken.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseAuthToken();
        message.username = object.username ?? "";
        message.validUntil = object.validUntil ?? 0n;
        message.issuer = object.issuer ?? "";
        message.credential = object.credential ?? new Uint8Array(0);
        return message;
    },
};
function createBaseSignedToken() {
    return { kid: "", payload: new Uint8Array(0), signature: new Uint8Array(0) };
}
exports.SignedToken = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.kid !== "") {
            writer.uint32(10).string(message.kid);
        }
        if (message.payload.length !== 0) {
            writer.uint32(18).bytes(message.payload);
        }
        if (message.signature.length !== 0) {
            writer.uint32(26).bytes(message.signature);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseSignedToken();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.kid = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.payload = reader.bytes();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.signature = reader.bytes();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            kid: isSet(object.kid) ? globalThis.String(object.kid) : "",
            payload: isSet(object.payload) ? bytesFromBase64(object.payload) : new Uint8Array(0),
            signature: isSet(object.signature) ? bytesFromBase64(object.signature) : new Uint8Array(0),
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.kid !== "") {
            obj.kid = message.kid;
        }
        if (message.payload.length !== 0) {
            obj.payload = base64FromBytes(message.payload);
        }
        if (message.signature.length !== 0) {
            obj.signature = base64FromBytes(message.signature);
        }
        return obj;
    },
    create(base) {
        return exports.SignedToken.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseSignedToken();
        message.kid = object.kid ?? "";
        message.payload = object.payload ?? new Uint8Array(0);
        message.signature = object.signature ?? new Uint8Array(0);
        return message;
    },
};
function createBaseFireflyClient() {
    return { username: "", secret: new Uint8Array(0), public: new Uint8Array(0), credential: new Uint8Array(0) };
}
exports.FireflyClient = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.username !== "") {
            writer.uint32(10).string(message.username);
        }
        if (message.secret.length !== 0) {
            writer.uint32(18).bytes(message.secret);
        }
        if (message.public.length !== 0) {
            writer.uint32(26).bytes(message.public);
        }
        if (message.credential.length !== 0) {
            writer.uint32(34).bytes(message.credential);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseFireflyClient();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.username = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.secret = reader.bytes();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.public = reader.bytes();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.credential = reader.bytes();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            username: isSet(object.username) ? globalThis.String(object.username) : "",
            secret: isSet(object.secret) ? bytesFromBase64(object.secret) : new Uint8Array(0),
            public: isSet(object.public) ? bytesFromBase64(object.public) : new Uint8Array(0),
            credential: isSet(object.credential) ? bytesFromBase64(object.credential) : new Uint8Array(0),
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.username !== "") {
            obj.username = message.username;
        }
        if (message.secret.length !== 0) {
            obj.secret = base64FromBytes(message.secret);
        }
        if (message.public.length !== 0) {
            obj.public = base64FromBytes(message.public);
        }
        if (message.credential.length !== 0) {
            obj.credential = base64FromBytes(message.credential);
        }
        return obj;
    },
    create(base) {
        return exports.FireflyClient.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseFireflyClient();
        message.username = object.username ?? "";
        message.secret = object.secret ?? new Uint8Array(0);
        message.public = object.public ?? new Uint8Array(0);
        message.credential = object.credential ?? new Uint8Array(0);
        return message;
    },
};
function createBaseFireflyGroupExtension() {
    return { name: "", roles: undefined, channels: undefined, members: undefined };
}
exports.FireflyGroupExtension = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.name !== "") {
            writer.uint32(10).string(message.name);
        }
        if (message.roles !== undefined) {
            exports.FireflyGroupRoles.encode(message.roles, writer.uint32(18).fork()).join();
        }
        if (message.channels !== undefined) {
            exports.FireflyGroupChannels.encode(message.channels, writer.uint32(26).fork()).join();
        }
        if (message.members !== undefined) {
            exports.FireflyGroupMembers.encode(message.members, writer.uint32(34).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseFireflyGroupExtension();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.name = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.roles = exports.FireflyGroupRoles.decode(reader, reader.uint32());
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.channels = exports.FireflyGroupChannels.decode(reader, reader.uint32());
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.members = exports.FireflyGroupMembers.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            name: isSet(object.name) ? globalThis.String(object.name) : "",
            roles: isSet(object.roles) ? exports.FireflyGroupRoles.fromJSON(object.roles) : undefined,
            channels: isSet(object.channels) ? exports.FireflyGroupChannels.fromJSON(object.channels) : undefined,
            members: isSet(object.members) ? exports.FireflyGroupMembers.fromJSON(object.members) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.name !== "") {
            obj.name = message.name;
        }
        if (message.roles !== undefined) {
            obj.roles = exports.FireflyGroupRoles.toJSON(message.roles);
        }
        if (message.channels !== undefined) {
            obj.channels = exports.FireflyGroupChannels.toJSON(message.channels);
        }
        if (message.members !== undefined) {
            obj.members = exports.FireflyGroupMembers.toJSON(message.members);
        }
        return obj;
    },
    create(base) {
        return exports.FireflyGroupExtension.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseFireflyGroupExtension();
        message.name = object.name ?? "";
        message.roles = (object.roles !== undefined && object.roles !== null)
            ? exports.FireflyGroupRoles.fromPartial(object.roles)
            : undefined;
        message.channels = (object.channels !== undefined && object.channels !== null)
            ? exports.FireflyGroupChannels.fromPartial(object.channels)
            : undefined;
        message.members = (object.members !== undefined && object.members !== null)
            ? exports.FireflyGroupMembers.fromPartial(object.members)
            : undefined;
        return message;
    },
};
function createBaseFireflyGroupRole() {
    return { id: 0, name: "", permissions: 0n };
}
exports.FireflyGroupRole = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.id !== 0) {
            writer.uint32(8).uint32(message.id);
        }
        if (message.name !== "") {
            writer.uint32(18).string(message.name);
        }
        if (message.permissions !== 0n) {
            if (BigInt.asUintN(64, message.permissions) !== message.permissions) {
                throw new globalThis.Error("value provided for field message.permissions of type uint64 too large");
            }
            writer.uint32(24).uint64(message.permissions);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseFireflyGroupRole();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.id = reader.uint32();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.name = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.permissions = reader.uint64();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: isSet(object.id) ? globalThis.Number(object.id) : 0,
            name: isSet(object.name) ? globalThis.String(object.name) : "",
            permissions: isSet(object.permissions) ? BigInt(object.permissions) : 0n,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.id !== 0) {
            obj.id = Math.round(message.id);
        }
        if (message.name !== "") {
            obj.name = message.name;
        }
        if (message.permissions !== 0n) {
            obj.permissions = message.permissions.toString();
        }
        return obj;
    },
    create(base) {
        return exports.FireflyGroupRole.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseFireflyGroupRole();
        message.id = object.id ?? 0;
        message.name = object.name ?? "";
        message.permissions = object.permissions ?? 0n;
        return message;
    },
};
function createBaseFireflyGroupRoles() {
    return { roles: [] };
}
exports.FireflyGroupRoles = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        for (const v of message.roles) {
            exports.FireflyGroupRole.encode(v, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseFireflyGroupRoles();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.roles.push(exports.FireflyGroupRole.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            roles: globalThis.Array.isArray(object?.roles) ? object.roles.map((e) => exports.FireflyGroupRole.fromJSON(e)) : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.roles?.length) {
            obj.roles = message.roles.map((e) => exports.FireflyGroupRole.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.FireflyGroupRoles.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseFireflyGroupRoles();
        message.roles = object.roles?.map((e) => exports.FireflyGroupRole.fromPartial(e)) || [];
        return message;
    },
};
function createBaseFireflyGroupMember() {
    return { username: "", role: 0 };
}
exports.FireflyGroupMember = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.username !== "") {
            writer.uint32(10).string(message.username);
        }
        if (message.role !== 0) {
            writer.uint32(16).uint32(message.role);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseFireflyGroupMember();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.username = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.role = reader.uint32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            username: isSet(object.username) ? globalThis.String(object.username) : "",
            role: isSet(object.role) ? globalThis.Number(object.role) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.username !== "") {
            obj.username = message.username;
        }
        if (message.role !== 0) {
            obj.role = Math.round(message.role);
        }
        return obj;
    },
    create(base) {
        return exports.FireflyGroupMember.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseFireflyGroupMember();
        message.username = object.username ?? "";
        message.role = object.role ?? 0;
        return message;
    },
};
function createBaseFireflyGroupMembers() {
    return { members: [] };
}
exports.FireflyGroupMembers = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        for (const v of message.members) {
            exports.FireflyGroupMember.encode(v, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseFireflyGroupMembers();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.members.push(exports.FireflyGroupMember.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            members: globalThis.Array.isArray(object?.members)
                ? object.members.map((e) => exports.FireflyGroupMember.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.members?.length) {
            obj.members = message.members.map((e) => exports.FireflyGroupMember.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.FireflyGroupMembers.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseFireflyGroupMembers();
        message.members = object.members?.map((e) => exports.FireflyGroupMember.fromPartial(e)) || [];
        return message;
    },
};
function createBaseFireflyGroupChannel() {
    return { id: 0, name: "", type: 0, roles: undefined };
}
exports.FireflyGroupChannel = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.id !== 0) {
            writer.uint32(8).uint32(message.id);
        }
        if (message.name !== "") {
            writer.uint32(18).string(message.name);
        }
        if (message.type !== 0) {
            writer.uint32(24).uint32(message.type);
        }
        if (message.roles !== undefined) {
            exports.FireflyGroupRoles.encode(message.roles, writer.uint32(34).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseFireflyGroupChannel();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.id = reader.uint32();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.name = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.type = reader.uint32();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.roles = exports.FireflyGroupRoles.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: isSet(object.id) ? globalThis.Number(object.id) : 0,
            name: isSet(object.name) ? globalThis.String(object.name) : "",
            type: isSet(object.type) ? globalThis.Number(object.type) : 0,
            roles: isSet(object.roles) ? exports.FireflyGroupRoles.fromJSON(object.roles) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.id !== 0) {
            obj.id = Math.round(message.id);
        }
        if (message.name !== "") {
            obj.name = message.name;
        }
        if (message.type !== 0) {
            obj.type = Math.round(message.type);
        }
        if (message.roles !== undefined) {
            obj.roles = exports.FireflyGroupRoles.toJSON(message.roles);
        }
        return obj;
    },
    create(base) {
        return exports.FireflyGroupChannel.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseFireflyGroupChannel();
        message.id = object.id ?? 0;
        message.name = object.name ?? "";
        message.type = object.type ?? 0;
        message.roles = (object.roles !== undefined && object.roles !== null)
            ? exports.FireflyGroupRoles.fromPartial(object.roles)
            : undefined;
        return message;
    },
};
function createBaseFireflyGroupChannels() {
    return { channels: [] };
}
exports.FireflyGroupChannels = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        for (const v of message.channels) {
            exports.FireflyGroupChannel.encode(v, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseFireflyGroupChannels();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.channels.push(exports.FireflyGroupChannel.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            channels: globalThis.Array.isArray(object?.channels)
                ? object.channels.map((e) => exports.FireflyGroupChannel.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.channels?.length) {
            obj.channels = message.channels.map((e) => exports.FireflyGroupChannel.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.FireflyGroupChannels.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseFireflyGroupChannels();
        message.channels = object.channels?.map((e) => exports.FireflyGroupChannel.fromPartial(e)) || [];
        return message;
    },
};
function createBasePreKeyBundle() {
    return {
        registrationId: 0,
        deviceId: 0,
        preKeyId: 0,
        prePublicKey: new Uint8Array(0),
        signedPreKeyId: 0,
        signedPrePublicKey: new Uint8Array(0),
        signedPreKeySignature: new Uint8Array(0),
        identityPublicKey: new Uint8Array(0),
        KEMPreKeyId: 0,
        KEMPrePublicKey: new Uint8Array(0),
        KEMPreKeySignature: new Uint8Array(0),
    };
}
exports.PreKeyBundle = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.registrationId !== 0) {
            writer.uint32(8).int32(message.registrationId);
        }
        if (message.deviceId !== 0) {
            writer.uint32(16).int32(message.deviceId);
        }
        if (message.preKeyId !== 0) {
            writer.uint32(24).int32(message.preKeyId);
        }
        if (message.prePublicKey.length !== 0) {
            writer.uint32(34).bytes(message.prePublicKey);
        }
        if (message.signedPreKeyId !== 0) {
            writer.uint32(40).int32(message.signedPreKeyId);
        }
        if (message.signedPrePublicKey.length !== 0) {
            writer.uint32(50).bytes(message.signedPrePublicKey);
        }
        if (message.signedPreKeySignature.length !== 0) {
            writer.uint32(58).bytes(message.signedPreKeySignature);
        }
        if (message.identityPublicKey.length !== 0) {
            writer.uint32(66).bytes(message.identityPublicKey);
        }
        if (message.KEMPreKeyId !== 0) {
            writer.uint32(72).int32(message.KEMPreKeyId);
        }
        if (message.KEMPrePublicKey.length !== 0) {
            writer.uint32(82).bytes(message.KEMPrePublicKey);
        }
        if (message.KEMPreKeySignature.length !== 0) {
            writer.uint32(90).bytes(message.KEMPreKeySignature);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBasePreKeyBundle();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.registrationId = reader.int32();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.deviceId = reader.int32();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.preKeyId = reader.int32();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.prePublicKey = reader.bytes();
                    continue;
                }
                case 5: {
                    if (tag !== 40) {
                        break;
                    }
                    message.signedPreKeyId = reader.int32();
                    continue;
                }
                case 6: {
                    if (tag !== 50) {
                        break;
                    }
                    message.signedPrePublicKey = reader.bytes();
                    continue;
                }
                case 7: {
                    if (tag !== 58) {
                        break;
                    }
                    message.signedPreKeySignature = reader.bytes();
                    continue;
                }
                case 8: {
                    if (tag !== 66) {
                        break;
                    }
                    message.identityPublicKey = reader.bytes();
                    continue;
                }
                case 9: {
                    if (tag !== 72) {
                        break;
                    }
                    message.KEMPreKeyId = reader.int32();
                    continue;
                }
                case 10: {
                    if (tag !== 82) {
                        break;
                    }
                    message.KEMPrePublicKey = reader.bytes();
                    continue;
                }
                case 11: {
                    if (tag !== 90) {
                        break;
                    }
                    message.KEMPreKeySignature = reader.bytes();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            registrationId: isSet(object.registrationId) ? globalThis.Number(object.registrationId) : 0,
            deviceId: isSet(object.deviceId) ? globalThis.Number(object.deviceId) : 0,
            preKeyId: isSet(object.preKeyId) ? globalThis.Number(object.preKeyId) : 0,
            prePublicKey: isSet(object.prePublicKey) ? bytesFromBase64(object.prePublicKey) : new Uint8Array(0),
            signedPreKeyId: isSet(object.signedPreKeyId) ? globalThis.Number(object.signedPreKeyId) : 0,
            signedPrePublicKey: isSet(object.signedPrePublicKey)
                ? bytesFromBase64(object.signedPrePublicKey)
                : new Uint8Array(0),
            signedPreKeySignature: isSet(object.signedPreKeySignature)
                ? bytesFromBase64(object.signedPreKeySignature)
                : new Uint8Array(0),
            identityPublicKey: isSet(object.identityPublicKey)
                ? bytesFromBase64(object.identityPublicKey)
                : new Uint8Array(0),
            KEMPreKeyId: isSet(object.KEMPreKeyId) ? globalThis.Number(object.KEMPreKeyId) : 0,
            KEMPrePublicKey: isSet(object.KEMPrePublicKey) ? bytesFromBase64(object.KEMPrePublicKey) : new Uint8Array(0),
            KEMPreKeySignature: isSet(object.KEMPreKeySignature)
                ? bytesFromBase64(object.KEMPreKeySignature)
                : new Uint8Array(0),
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.registrationId !== 0) {
            obj.registrationId = Math.round(message.registrationId);
        }
        if (message.deviceId !== 0) {
            obj.deviceId = Math.round(message.deviceId);
        }
        if (message.preKeyId !== 0) {
            obj.preKeyId = Math.round(message.preKeyId);
        }
        if (message.prePublicKey.length !== 0) {
            obj.prePublicKey = base64FromBytes(message.prePublicKey);
        }
        if (message.signedPreKeyId !== 0) {
            obj.signedPreKeyId = Math.round(message.signedPreKeyId);
        }
        if (message.signedPrePublicKey.length !== 0) {
            obj.signedPrePublicKey = base64FromBytes(message.signedPrePublicKey);
        }
        if (message.signedPreKeySignature.length !== 0) {
            obj.signedPreKeySignature = base64FromBytes(message.signedPreKeySignature);
        }
        if (message.identityPublicKey.length !== 0) {
            obj.identityPublicKey = base64FromBytes(message.identityPublicKey);
        }
        if (message.KEMPreKeyId !== 0) {
            obj.KEMPreKeyId = Math.round(message.KEMPreKeyId);
        }
        if (message.KEMPrePublicKey.length !== 0) {
            obj.KEMPrePublicKey = base64FromBytes(message.KEMPrePublicKey);
        }
        if (message.KEMPreKeySignature.length !== 0) {
            obj.KEMPreKeySignature = base64FromBytes(message.KEMPreKeySignature);
        }
        return obj;
    },
    create(base) {
        return exports.PreKeyBundle.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBasePreKeyBundle();
        message.registrationId = object.registrationId ?? 0;
        message.deviceId = object.deviceId ?? 0;
        message.preKeyId = object.preKeyId ?? 0;
        message.prePublicKey = object.prePublicKey ?? new Uint8Array(0);
        message.signedPreKeyId = object.signedPreKeyId ?? 0;
        message.signedPrePublicKey = object.signedPrePublicKey ?? new Uint8Array(0);
        message.signedPreKeySignature = object.signedPreKeySignature ?? new Uint8Array(0);
        message.identityPublicKey = object.identityPublicKey ?? new Uint8Array(0);
        message.KEMPreKeyId = object.KEMPreKeyId ?? 0;
        message.KEMPrePublicKey = object.KEMPrePublicKey ?? new Uint8Array(0);
        message.KEMPreKeySignature = object.KEMPreKeySignature ?? new Uint8Array(0);
        return message;
    },
};
function createBaseConversationStart() {
    return { conversationId: 0n, startedBy: "", other: "", bundle: undefined };
}
exports.ConversationStart = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.conversationId !== 0n) {
            if (BigInt.asUintN(64, message.conversationId) !== message.conversationId) {
                throw new globalThis.Error("value provided for field message.conversationId of type uint64 too large");
            }
            writer.uint32(8).uint64(message.conversationId);
        }
        if (message.startedBy !== "") {
            writer.uint32(18).string(message.startedBy);
        }
        if (message.other !== "") {
            writer.uint32(26).string(message.other);
        }
        if (message.bundle !== undefined) {
            exports.PreKeyBundle.encode(message.bundle, writer.uint32(34).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseConversationStart();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.conversationId = reader.uint64();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.startedBy = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.other = reader.string();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.bundle = exports.PreKeyBundle.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            conversationId: isSet(object.conversationId) ? BigInt(object.conversationId) : 0n,
            startedBy: isSet(object.startedBy) ? globalThis.String(object.startedBy) : "",
            other: isSet(object.other) ? globalThis.String(object.other) : "",
            bundle: isSet(object.bundle) ? exports.PreKeyBundle.fromJSON(object.bundle) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.conversationId !== 0n) {
            obj.conversationId = message.conversationId.toString();
        }
        if (message.startedBy !== "") {
            obj.startedBy = message.startedBy;
        }
        if (message.other !== "") {
            obj.other = message.other;
        }
        if (message.bundle !== undefined) {
            obj.bundle = exports.PreKeyBundle.toJSON(message.bundle);
        }
        return obj;
    },
    create(base) {
        return exports.ConversationStart.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseConversationStart();
        message.conversationId = object.conversationId ?? 0n;
        message.startedBy = object.startedBy ?? "";
        message.other = object.other ?? "";
        message.bundle = (object.bundle !== undefined && object.bundle !== null)
            ? exports.PreKeyBundle.fromPartial(object.bundle)
            : undefined;
        return message;
    },
};
function createBasePreKeyBundles() {
    return { bundles: [] };
}
exports.PreKeyBundles = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        for (const v of message.bundles) {
            exports.PreKeyBundle.encode(v, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBasePreKeyBundles();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.bundles.push(exports.PreKeyBundle.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            bundles: globalThis.Array.isArray(object?.bundles)
                ? object.bundles.map((e) => exports.PreKeyBundle.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.bundles?.length) {
            obj.bundles = message.bundles.map((e) => exports.PreKeyBundle.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.PreKeyBundles.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBasePreKeyBundles();
        message.bundles = object.bundles?.map((e) => exports.PreKeyBundle.fromPartial(e)) || [];
        return message;
    },
};
function createBaseConversation() {
    return { id: 0n, startedBy: "", other: "" };
}
exports.Conversation = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.id !== 0n) {
            if (BigInt.asUintN(64, message.id) !== message.id) {
                throw new globalThis.Error("value provided for field message.id of type uint64 too large");
            }
            writer.uint32(8).uint64(message.id);
        }
        if (message.startedBy !== "") {
            writer.uint32(18).string(message.startedBy);
        }
        if (message.other !== "") {
            writer.uint32(26).string(message.other);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseConversation();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.id = reader.uint64();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.startedBy = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.other = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: isSet(object.id) ? BigInt(object.id) : 0n,
            startedBy: isSet(object.startedBy) ? globalThis.String(object.startedBy) : "",
            other: isSet(object.other) ? globalThis.String(object.other) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.id !== 0n) {
            obj.id = message.id.toString();
        }
        if (message.startedBy !== "") {
            obj.startedBy = message.startedBy;
        }
        if (message.other !== "") {
            obj.other = message.other;
        }
        return obj;
    },
    create(base) {
        return exports.Conversation.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseConversation();
        message.id = object.id ?? 0n;
        message.startedBy = object.startedBy ?? "";
        message.other = object.other ?? "";
        return message;
    },
};
function createBaseConversations() {
    return { conversations: [] };
}
exports.Conversations = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        for (const v of message.conversations) {
            exports.Conversation.encode(v, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseConversations();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.conversations.push(exports.Conversation.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            conversations: globalThis.Array.isArray(object?.conversations)
                ? object.conversations.map((e) => exports.Conversation.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.conversations?.length) {
            obj.conversations = message.conversations.map((e) => exports.Conversation.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.Conversations.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseConversations();
        message.conversations = object.conversations?.map((e) => exports.Conversation.fromPartial(e)) || [];
        return message;
    },
};
function createBaseUserMessageInner() {
    return { plainText: undefined, callMessage: undefined };
}
exports.UserMessageInner = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.plainText !== undefined) {
            writer.uint32(10).bytes(message.plainText);
        }
        if (message.callMessage !== undefined) {
            writer.uint32(18).bytes(message.callMessage);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUserMessageInner();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.plainText = reader.bytes();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.callMessage = reader.bytes();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            plainText: isSet(object.plainText) ? bytesFromBase64(object.plainText) : undefined,
            callMessage: isSet(object.callMessage) ? bytesFromBase64(object.callMessage) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.plainText !== undefined) {
            obj.plainText = base64FromBytes(message.plainText);
        }
        if (message.callMessage !== undefined) {
            obj.callMessage = base64FromBytes(message.callMessage);
        }
        return obj;
    },
    create(base) {
        return exports.UserMessageInner.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseUserMessageInner();
        message.plainText = object.plainText ?? undefined;
        message.callMessage = object.callMessage ?? undefined;
        return message;
    },
};
function bytesFromBase64(b64) {
    const bin = globalThis.atob(b64);
    const arr = new Uint8Array(bin.length);
    for (let i = 0; i < bin.length; ++i) {
        arr[i] = bin.charCodeAt(i);
    }
    return arr;
}
function base64FromBytes(arr) {
    const bin = [];
    arr.forEach((byte) => {
        bin.push(globalThis.String.fromCharCode(byte));
    });
    return globalThis.btoa(bin.join(""));
}
function isSet(value) {
    return value !== null && value !== undefined;
}
